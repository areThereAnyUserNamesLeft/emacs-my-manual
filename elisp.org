#+title: Elisp

* Elsip

** Assignment

*** setq - assign a var globally

#+begin_src elisp
(setq name-of-thing "thing")
(message name-of-thing)
#+end_src

#+RESULTS:
: thing

*** let - assign a var locally

#+begin_src elisp
(setq name-of-thing "global thing")
(let ((name-of-thing "local thing"))
(message name-of-thing))
(message name-of-thing)

#+end_src

#+RESULTS:
: global thing

*** defun - assign a function

#+begin_src elisp
(defun do-a-thing (arg)
  (format "I am a function that takes an argument and writes it on the end of this sentence: \n%s\n" arg))
(do-a-thing "I am the argument that was passed in!")
#+end_src

#+RESULTS:
: I am a function that takes an argument and writes it on the end of this sentence:
: I am the argument that was passed in!
*** read-from-minibuffer - prompt a user for input

#+begin_src elisp

 (let ((prompted-thing (read-from-minibuffer "Hey, give me a word: ")))
 (message (format "Your word == %s" prompted-thing)
  ))
#+end_src

#+RESULTS:
: Your word == dog


** Types
*** Types are boring - string, numbers etc I'll back fill this
**** sexps and lists
***** Every thing in elisp is a list but sexps are a special type of list where the first item (the =car=) is a function that tells you how to handle the other items in the list (the =cdr=)

#+begin_src elisp
;; this is a list, if eval it I get:
("dog" "cat" "dinochicken")
;; Invalid function: "dog"
#+end_src

#+begin_src elisp
;; this is a by adding a function in the list as the `car`, when I eval it I get:
(message "dog" "cat" "dino chicken")
;; : dog
#+end_src

#+RESULTS:
: dog

** Given useful functions
*** progn - string together a list of sexps

#+begin_src elisp
(progn
  (setq my-list '())
  (push  "dog" my-list)
  (push  "cat" my-list)
  (push  "dino chicken" my-list)
  (print my-list)
  )

#+end_src

#+RESULTS:
| dinochicken | cat | dog |

*** mapcar - run a function on a sequence and makes a list of the results
#+begin_src elisp
  (setq out-list '())
  (setq my-list '("dog" "cat" "dino chicken"))
  (mapcar 's-upper-camel-case my-list)

#+end_src

#+RESULTS:
| Dog | Cat | DinoChicken |
** Looping logic

#+begin_src elisp

(let (prompted-thing ((read-from-minibuffer "Hey, give me a number: ")))

  )

#+end_src
